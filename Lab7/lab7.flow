import string;
import ds/array;
import ds/tree;
import lingo/pegcode/driver;

grammar = compilePegGrammar("#include C:\Users\eduar\MTK_Labs\lab7_Grammar.lingo");

Exp ::= Add, Sub, Mul, Div, Var, Rat;
Sub(left: Exp, right: Exp);
Add(left: Exp, right: Exp); 
Mul(left: Exp, right: Exp);
Div(left: Exp, right: Exp);
Rat(num: int, denom: int);
Neg(val: int);
Var(letter: string);

addRat(left: Rat, right: Rat) -> Rat
{
    Rat(left.num*right.denom + right.num*left.denom, left.denom*right.denom);
}

mulRat(left: Rat, right: Rat) -> Rat
{
    Rat(left.num*right.num, left.denom*right.denom);
}

subRat(left: Rat, right: Rat) -> Rat
{
    Rat(left.num*right.denom - right.num*left.denom, left.denom*right.denom);   
}

divRat(left: Rat, right: Rat) -> Rat
{
    Rat(left.num*right.denom, left.denom*right.num);
}

calculate(exp : Exp, values: Tree<string, Rat>) -> Maybe<Rat>
{
    switch (exp : Exp) 
    {
        Add(left, right): 
        {
            left_val = calculate(left, values); // in the end left_val will be Maybe<Rat>
            right_val = calculate(right, values); // in the end left_val will be Maybe<Rat>

            maybeAddRat = maybeMap2(addRat); // this function gets a function of two arguments that returns smth and returns it 
                                             // but with Maybe<> arguments and Maybe<smth>
            maybeAddRat(left_val, right_val);
        }
        Mul(left, right):
        {
            left_val = calculate(left, values); 
            right_val = calculate(right, values);

            maybeMulRat = maybeMap2(mulRat);
            maybeMulRat(left_val, right_val);
        }
        Sub(left, right):
        {
            left_val = calculate(left, values); 
            right_val = calculate(right, values);

            maybeSubRat = maybeMap2(subRat);    
            maybeSubRat(left_val, right_val);
        }
        Div(left, right):
        {
            left_val = calculate(left, values); 
            right_val = calculate(right, values);

            maybeDivRat = maybeMap2(divRat);
            maybeDivRat(left_val, right_val);
        }
        Var(letter):
        {
            lookupTree(values, letter); // -> Maybe<Rat>
        }
        Rat(num, denom):
        {
            Some(Rat(num, denom)); // Some() is for correct work with Maybe
        }
    }
}

buildSub(xs : [flow])
{
    fold(xs[1], xs[0], \acc, x -> Sub(acc, x));
}

buildAdd(xs : [flow])
{
    fold(xs[1], xs[0], \acc, x -> Add(acc, x));
}

buildMul(xs : [flow])
{
    fold(xs[1], xs[0], \acc, x -> Mul(acc, x));
}

buildDiv(xs : [flow])
{
    fold(xs[1], xs[0], \acc, x -> Mul(acc, x));
}

specialPegActions = {
	s = setTree(defaultPegActions.t, "buildSub", buildSub);

    a = setTree(s, "buildAdd", buildAdd);

    m = setTree(a, "buildMul", buildMul);

    d = setTree(m, "buildDiv", buildDiv);

	SemanticActions(d);
}

parse(text : string)
{
    parsic(grammar, text, specialPegActions);
}

main()
{
    text : string = "2*x";
    println(parse(text));

    vars = setTree(makeTree(), "x", Rat(2, 1));

    println(calculate(parse(text), vars));

    quit(0);
}
